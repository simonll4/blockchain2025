/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ABIResolverInterface extends Interface {
  getFunction(
    nameOrSignature: "setABI" | "ABI" | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ABIChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "setABI",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ABI",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "setABI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ABI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace ABIChangedEvent {
  export type InputTuple = [node: BytesLike, contentType: BigNumberish];
  export type OutputTuple = [node: string, contentType: bigint];
  export interface OutputObject {
    node: string;
    contentType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ABIResolver extends BaseContract {
  connect(runner?: ContractRunner | null): ABIResolver;
  waitForDeployment(): Promise<this>;

  interface: ABIResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
   * @param contentType The content type of the ABI
   * @param data The ABI data.
   * @param node The node to update.
   */
  setABI: TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the ABI associated with an ENS node. Defined in EIP205.
   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
   * @param node The ENS node to query
   */
  ABI: TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string]],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setABI"
  ): TypedContractMethod<
    [node: BytesLike, contentType: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ABI"
  ): TypedContractMethod<
    [node: BytesLike, contentTypes: BigNumberish],
    [[bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;

  getEvent(
    key: "ABIChanged"
  ): TypedContractEvent<
    ABIChangedEvent.InputTuple,
    ABIChangedEvent.OutputTuple,
    ABIChangedEvent.OutputObject
  >;

  filters: {
    "ABIChanged(bytes32,uint256)": TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;
    ABIChanged: TypedContractEvent<
      ABIChangedEvent.InputTuple,
      ABIChangedEvent.OutputTuple,
      ABIChangedEvent.OutputObject
    >;
  };
}
