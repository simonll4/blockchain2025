/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  ReverseRegistrar,
  ReverseRegistrarInterface,
} from "../ReverseRegistrar";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ENS",
        name: "ensAddr",
        type: "address",
      },
      {
        internalType: "contract Resolver",
        name: "resolverAddr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ADDR_REVERSE_NODE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "defaultResolver",
    outputs: [
      {
        internalType: "contract Resolver",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [],
    name: "ens",
    outputs: [
      {
        internalType: "contract ENS",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
    constant: true,
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "resolver",
        type: "address",
      },
    ],
    name: "claimWithResolver",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "setName",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "node",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
    constant: true,
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011df380380620011df833981810160405281019062000037919062000303565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be37f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6040518263ffffffff1660e01b815260040162000139919062000365565b602060405180830381865afa15801562000157573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200017d9190620003b3565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000237578073ffffffffffffffffffffffffffffffffffffffff16631e83409a336040518263ffffffff1660e01b8152600401620001ef9190620003f6565b6020604051808303816000875af11580156200020f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000235919062000444565b505b50505062000476565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002728262000245565b9050919050565b6000620002868262000265565b9050919050565b620002988162000279565b8114620002a457600080fd5b50565b600081519050620002b8816200028d565b92915050565b6000620002cb8262000265565b9050919050565b620002dd81620002be565b8114620002e957600080fd5b50565b600081519050620002fd81620002d2565b92915050565b600080604083850312156200031d576200031c62000240565b5b60006200032d85828601620002a7565b92505060206200034085828601620002ec565b9150509250929050565b6000819050919050565b6200035f816200034a565b82525050565b60006020820190506200037c600083018462000354565b92915050565b6200038d8162000265565b81146200039957600080fd5b50565b600081519050620003ad8162000382565b92915050565b600060208284031215620003cc57620003cb62000240565b5b6000620003dc848285016200039c565b91505092915050565b620003f08162000265565b82525050565b60006020820190506200040d6000830184620003e5565b92915050565b6200041e816200034a565b81146200042a57600080fd5b50565b6000815190506200043e8162000413565b92915050565b6000602082840312156200045d576200045c62000240565b5b60006200046d848285016200042d565b91505092915050565b610d5980620004866000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637cf8a2eb1161005b5780637cf8a2eb14610100578063828eab0e1461011e578063bffbe61c1461013c578063c47f00271461016c5761007d565b80630f5a5466146100825780631e83409a146100b25780633f15457f146100e2575b600080fd5b61009c60048036038101906100979190610890565b61019c565b6040516100a991906108e9565b60405180910390f35b6100cc60048036038101906100c79190610904565b610609565b6040516100d991906108e9565b60405180910390f35b6100ea61061d565b6040516100f79190610990565b60405180910390f35b610108610641565b60405161011591906108e9565b60405180910390f35b610126610668565b60405161013391906109cc565b60405180910390f35b61015660048036038101906101519190610904565b61068e565b60405161016391906108e9565b60405180910390f35b61018660048036038101906101819190610b2d565b6106eb565b60405161019391906108e9565b60405180910390f35b6000806101a8336107b4565b905060007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b826040516020016101e2929190610b97565b60405160208183030381529060405280519060200120905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b815260040161025691906108e9565b602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610bd8565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415801561039b575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630178b8bf836040518263ffffffff1660e01b815260040161032a91906108e9565b602060405180830381865afa158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610bd8565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b15610517573073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146104895760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85306040518463ffffffff1660e01b815260040161045393929190610c14565b600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b505050503090505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631896f70a83876040518363ffffffff1660e01b81526004016104e4929190610c4b565b600060405180830381600087803b1580156104fe57600080fd5b505af1158015610512573d6000803e3d6000fd5b505050505b8573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146105fd5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306ab59237f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b85896040518463ffffffff1660e01b81526004016105ca93929190610c14565b600060405180830381600087803b1580156105e457600080fd5b505af11580156105f8573d6000803e3d6000fd5b505050505b81935050505092915050565b600061061682600061019c565b9050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260001b6106bd836107b4565b6040516020016106ce929190610b97565b604051602081830303815290604052805190602001209050919050565b60008061071a30600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661019c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637737221382856040518363ffffffff1660e01b8152600401610779929190610cf3565b600060405180830381600087803b15801561079357600080fd5b505af11580156107a7573d6000803e3d6000fd5b5050505080915050919050565b60007f303132333435363738396162636465660000000000000000000000000000000060285b60008111156108105760018103905081600f85161a815360108404935060018103905081600f85161a81536010840493506107da565b506028600020915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061085d82610832565b9050919050565b61086d81610852565b811461087857600080fd5b50565b60008135905061088a81610864565b92915050565b600080604083850312156108a7576108a6610828565b5b60006108b58582860161087b565b92505060206108c68582860161087b565b9150509250929050565b6000819050919050565b6108e3816108d0565b82525050565b60006020820190506108fe60008301846108da565b92915050565b60006020828403121561091a57610919610828565b5b60006109288482850161087b565b91505092915050565b6000819050919050565b600061095661095161094c84610832565b610931565b610832565b9050919050565b60006109688261093b565b9050919050565b600061097a8261095d565b9050919050565b61098a8161096f565b82525050565b60006020820190506109a56000830184610981565b92915050565b60006109b68261095d565b9050919050565b6109c6816109ab565b82525050565b60006020820190506109e160008301846109bd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a3a826109f1565b810181811067ffffffffffffffff82111715610a5957610a58610a02565b5b80604052505050565b6000610a6c61081e565b9050610a788282610a31565b919050565b600067ffffffffffffffff821115610a9857610a97610a02565b5b610aa1826109f1565b9050602081019050919050565b82818337600083830152505050565b6000610ad0610acb84610a7d565b610a62565b905082815260208101848484011115610aec57610aeb6109ec565b5b610af7848285610aae565b509392505050565b600082601f830112610b1457610b136109e7565b5b8135610b24848260208601610abd565b91505092915050565b600060208284031215610b4357610b42610828565b5b600082013567ffffffffffffffff811115610b6157610b6061082d565b5b610b6d84828501610aff565b91505092915050565b6000819050919050565b610b91610b8c826108d0565b610b76565b82525050565b6000610ba38285610b80565b602082019150610bb38284610b80565b6020820191508190509392505050565b600081519050610bd281610864565b92915050565b600060208284031215610bee57610bed610828565b5b6000610bfc84828501610bc3565b91505092915050565b610c0e81610852565b82525050565b6000606082019050610c2960008301866108da565b610c3660208301856108da565b610c436040830184610c05565b949350505050565b6000604082019050610c6060008301856108da565b610c6d6020830184610c05565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cae578082015181840152602081019050610c93565b60008484015250505050565b6000610cc582610c74565b610ccf8185610c7f565b9350610cdf818560208601610c90565b610ce8816109f1565b840191505092915050565b6000604082019050610d0860008301856108da565b8181036020830152610d1a8184610cba565b9050939250505056fea264697066735822122021742959155381c29cb49cfd79eee399c853bf2ac4bf624cc1738afd62e53e9164736f6c63430008130033";

type ReverseRegistrarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReverseRegistrarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReverseRegistrar__factory extends ContractFactory {
  constructor(...args: ReverseRegistrarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    ensAddr: AddressLike,
    resolverAddr: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(ensAddr, resolverAddr, overrides || {});
  }
  override deploy(
    ensAddr: AddressLike,
    resolverAddr: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(ensAddr, resolverAddr, overrides || {}) as Promise<
      ReverseRegistrar & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ReverseRegistrar__factory {
    return super.connect(runner) as ReverseRegistrar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReverseRegistrarInterface {
    return new Interface(_abi) as ReverseRegistrarInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ReverseRegistrar {
    return new Contract(address, _abi, runner) as unknown as ReverseRegistrar;
  }
}
