/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ReverseRegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDR_REVERSE_NODE"
      | "defaultResolver"
      | "ens"
      | "claim"
      | "claimWithResolver"
      | "setName"
      | "setNameFor"
      | "node"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDR_REVERSE_NODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultResolver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "claimWithResolver",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setNameFor",
    values: [AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "node", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "ADDR_REVERSE_NODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimWithResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNameFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "node", data: BytesLike): Result;
}

export interface ReverseRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): ReverseRegistrar;
  waitForDeployment(): Promise<this>;

  interface: ReverseRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDR_REVERSE_NODE: TypedContractMethod<[], [string], "view">;

  defaultResolver: TypedContractMethod<[], [string], "view">;

  ens: TypedContractMethod<[], [string], "view">;

  /**
   * Transfers ownership of the reverse ENS record associated with the      calling account.
   * @param owner The address to set as the owner of the reverse record in ENS.
   */
  claim: TypedContractMethod<[owner: AddressLike], [string], "nonpayable">;

  /**
   * Transfers ownership of the reverse ENS record associated with the      calling account.
   * @param owner The address to set as the owner of the reverse record in ENS.
   * @param resolver The address of the resolver to set; 0 to leave unchanged.
   */
  claimWithResolver: TypedContractMethod<
    [owner: AddressLike, resolver: AddressLike],
    [string],
    "nonpayable"
  >;

  /**
   * Sets the `name()` record for the reverse ENS record associated with the calling account. First updates the resolver to the default reverse resolver if necessary.
   * @param name The name to set for this address.
   */
  setName: TypedContractMethod<[name: string], [string], "nonpayable">;

  setNameFor: TypedContractMethod<
    [addr: AddressLike, owner: AddressLike, name: string],
    [string],
    "nonpayable"
  >;

  /**
   * Returns the node hash for a given account's reverse records.
   * @param addr The address to hash
   */
  node: TypedContractMethod<[addr: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDR_REVERSE_NODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultResolver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ens"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[owner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "claimWithResolver"
  ): TypedContractMethod<
    [owner: AddressLike, resolver: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setName"
  ): TypedContractMethod<[name: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setNameFor"
  ): TypedContractMethod<
    [addr: AddressLike, owner: AddressLike, name: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "node"
  ): TypedContractMethod<[addr: AddressLike], [string], "view">;

  filters: {};
}
