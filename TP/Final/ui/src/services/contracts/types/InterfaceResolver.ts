/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface InterfaceResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addr"
      | "setAddr"
      | "setInterface"
      | "interfaceImplementer"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AddrChanged" | "InterfaceChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addr", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setAddr",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterface",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "interfaceImplementer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interfaceImplementer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace AddrChangedEvent {
  export type InputTuple = [node: BytesLike, a: AddressLike];
  export type OutputTuple = [node: string, a: string];
  export interface OutputObject {
    node: string;
    a: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterfaceChangedEvent {
  export type InputTuple = [
    node: BytesLike,
    interfaceID: BytesLike,
    implementer: AddressLike
  ];
  export type OutputTuple = [
    node: string,
    interfaceID: string,
    implementer: string
  ];
  export interface OutputObject {
    node: string;
    interfaceID: string;
    implementer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InterfaceResolver extends BaseContract {
  connect(runner?: ContractRunner | null): InterfaceResolver;
  waitForDeployment(): Promise<this>;

  interface: InterfaceResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Returns the address associated with an ENS node.
   * @param node The ENS node to query.
   */
  addr: TypedContractMethod<[node: BytesLike], [string], "view">;

  /**
   * Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.
   * @param node The node to update.
   * @param nodeAddr The address to set.
   */
  setAddr: TypedContractMethod<
    [node: BytesLike, nodeAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
   * @param implementer The address of a contract that implements this interface for this node.
   * @param interfaceID The EIP 168 interface ID.
   * @param node The node to update.
   */
  setInterface: TypedContractMethod<
    [node: BytesLike, interfaceID: BytesLike, implementer: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
   * @param interfaceID The EIP 168 interface ID to check for.
   * @param node The ENS node to query.
   */
  interfaceImplementer: TypedContractMethod<
    [node: BytesLike, interfaceID: BytesLike],
    [string],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<[node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "setAddr"
  ): TypedContractMethod<
    [node: BytesLike, nodeAddr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterface"
  ): TypedContractMethod<
    [node: BytesLike, interfaceID: BytesLike, implementer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interfaceImplementer"
  ): TypedContractMethod<
    [node: BytesLike, interfaceID: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;

  getEvent(
    key: "AddrChanged"
  ): TypedContractEvent<
    AddrChangedEvent.InputTuple,
    AddrChangedEvent.OutputTuple,
    AddrChangedEvent.OutputObject
  >;
  getEvent(
    key: "InterfaceChanged"
  ): TypedContractEvent<
    InterfaceChangedEvent.InputTuple,
    InterfaceChangedEvent.OutputTuple,
    InterfaceChangedEvent.OutputObject
  >;

  filters: {
    "AddrChanged(bytes32,address)": TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;
    AddrChanged: TypedContractEvent<
      AddrChangedEvent.InputTuple,
      AddrChangedEvent.OutputTuple,
      AddrChangedEvent.OutputObject
    >;

    "InterfaceChanged(bytes32,bytes4,address)": TypedContractEvent<
      InterfaceChangedEvent.InputTuple,
      InterfaceChangedEvent.OutputTuple,
      InterfaceChangedEvent.OutputObject
    >;
    InterfaceChanged: TypedContractEvent<
      InterfaceChangedEvent.InputTuple,
      InterfaceChangedEvent.OutputTuple,
      InterfaceChangedEvent.OutputObject
    >;
  };
}
