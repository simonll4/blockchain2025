/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ENSRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setOwner"
      | "setSubnodeOwner"
      | "setResolver"
      | "setTTL"
      | "owner"
      | "resolver"
      | "ttl"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewOwner" | "NewResolver" | "NewTTL" | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeOwner",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTTL",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "resolver", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "ttl", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTTL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ttl", data: BytesLike): Result;
}

export namespace NewOwnerEvent {
  export type InputTuple = [
    node: BytesLike,
    label: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [node: string, label: string, owner: string];
  export interface OutputObject {
    node: string;
    label: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewResolverEvent {
  export type InputTuple = [node: BytesLike, resolver: AddressLike];
  export type OutputTuple = [node: string, resolver: string];
  export interface OutputObject {
    node: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTTLEvent {
  export type InputTuple = [node: BytesLike, ttl: BigNumberish];
  export type OutputTuple = [node: string, ttl: bigint];
  export interface OutputObject {
    node: string;
    ttl: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [node: BytesLike, owner: AddressLike];
  export type OutputTuple = [node: string, owner: string];
  export interface OutputObject {
    node: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ENSRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ENSRegistry;
  waitForDeployment(): Promise<this>;

  interface: ENSRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
   * @param _node The node to transfer ownership of.
   * @param _owner The address of the new owner.
   */
  setOwner: TypedContractMethod<
    [_node: BytesLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Transfers ownership of a subnode keccak256(_node, label) to a new address. May only be called by the owner of the parent node.
   * @param _node The parent node.
   * @param _owner The address of the new owner.
   * @param label The hash of the label specifying the subnode.
   */
  setSubnodeOwner: TypedContractMethod<
    [_node: BytesLike, label: BytesLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Sets the resolver address for the specified node.
   * @param _node The node to update.
   * @param _resolver The address of the resolver.
   */
  setResolver: TypedContractMethod<
    [_node: BytesLike, _resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Sets the TTL for the specified node.
   * @param _node The node to update.
   * @param _ttl The TTL in seconds.
   */
  setTTL: TypedContractMethod<
    [_node: BytesLike, _ttl: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the address that owns the specified node.
   * @param _node The specified node.
   */
  owner: TypedContractMethod<[_node: BytesLike], [string], "view">;

  /**
   * Returns the address of the resolver for the specified node.
   * @param _node The specified node.
   */
  resolver: TypedContractMethod<[_node: BytesLike], [string], "view">;

  /**
   * Returns the TTL of a node, and any records associated with it.
   * @param _node The specified node.
   */
  ttl: TypedContractMethod<[_node: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<
    [_node: BytesLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubnodeOwner"
  ): TypedContractMethod<
    [_node: BytesLike, label: BytesLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver"
  ): TypedContractMethod<
    [_node: BytesLike, _resolver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTTL"
  ): TypedContractMethod<
    [_node: BytesLike, _ttl: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[_node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "resolver"
  ): TypedContractMethod<[_node: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "ttl"
  ): TypedContractMethod<[_node: BytesLike], [bigint], "view">;

  getEvent(
    key: "NewOwner"
  ): TypedContractEvent<
    NewOwnerEvent.InputTuple,
    NewOwnerEvent.OutputTuple,
    NewOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewResolver"
  ): TypedContractEvent<
    NewResolverEvent.InputTuple,
    NewResolverEvent.OutputTuple,
    NewResolverEvent.OutputObject
  >;
  getEvent(
    key: "NewTTL"
  ): TypedContractEvent<
    NewTTLEvent.InputTuple,
    NewTTLEvent.OutputTuple,
    NewTTLEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "NewOwner(bytes32,bytes32,address)": TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;
    NewOwner: TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;

    "NewResolver(bytes32,address)": TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;
    NewResolver: TypedContractEvent<
      NewResolverEvent.InputTuple,
      NewResolverEvent.OutputTuple,
      NewResolverEvent.OutputObject
    >;

    "NewTTL(bytes32,uint64)": TypedContractEvent<
      NewTTLEvent.InputTuple,
      NewTTLEvent.OutputTuple,
      NewTTLEvent.OutputObject
    >;
    NewTTL: TypedContractEvent<
      NewTTLEvent.InputTuple,
      NewTTLEvent.OutputTuple,
      NewTTLEvent.OutputObject
    >;

    "Transfer(bytes32,address)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
