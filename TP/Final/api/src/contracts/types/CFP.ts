/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CFP {
  export type ProposalDataStruct = {
    sender: AddressLike;
    blockNumber: BigNumberish;
    timestamp: BigNumberish;
  };

  export type ProposalDataStructOutput = [
    sender: string,
    blockNumber: bigint,
    timestamp: bigint
  ] & { sender: string; blockNumber: bigint; timestamp: bigint };
}

export interface CFPInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "proposalData"
      | "proposals"
      | "closingTime"
      | "callId"
      | "creator"
      | "proposalCount"
      | "proposalTimestamp"
      | "registerProposal"
      | "registerProposalFor"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProposalRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "proposalData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "callId", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProposalFor",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "proposalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProposalFor",
    data: BytesLike
  ): Result;
}

export namespace ProposalRegisteredEvent {
  export type InputTuple = [
    proposal: BytesLike,
    sender: AddressLike,
    blockNumber: BigNumberish
  ];
  export type OutputTuple = [
    proposal: string,
    sender: string,
    blockNumber: bigint
  ];
  export interface OutputObject {
    proposal: string;
    sender: string;
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CFP extends BaseContract {
  connect(runner?: ContractRunner | null): CFP;
  waitForDeployment(): Promise<this>;

  interface: CFPInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  proposalData: TypedContractMethod<
    [proposal: BytesLike],
    [CFP.ProposalDataStructOutput],
    "view"
  >;

  proposals: TypedContractMethod<[index: BigNumberish], [string], "view">;

  closingTime: TypedContractMethod<[], [bigint], "view">;

  callId: TypedContractMethod<[], [string], "view">;

  creator: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposalTimestamp: TypedContractMethod<
    [proposal: BytesLike],
    [bigint],
    "view"
  >;

  registerProposal: TypedContractMethod<
    [proposal: BytesLike],
    [void],
    "nonpayable"
  >;

  registerProposalFor: TypedContractMethod<
    [proposal: BytesLike, sender: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "proposalData"
  ): TypedContractMethod<
    [proposal: BytesLike],
    [CFP.ProposalDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "closingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "callId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposalTimestamp"
  ): TypedContractMethod<[proposal: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerProposal"
  ): TypedContractMethod<[proposal: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerProposalFor"
  ): TypedContractMethod<
    [proposal: BytesLike, sender: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ProposalRegistered"
  ): TypedContractEvent<
    ProposalRegisteredEvent.InputTuple,
    ProposalRegisteredEvent.OutputTuple,
    ProposalRegisteredEvent.OutputObject
  >;

  filters: {
    "ProposalRegistered(bytes32,address,uint256)": TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;
    ProposalRegistered: TypedContractEvent<
      ProposalRegisteredEvent.InputTuple,
      ProposalRegisteredEvent.OutputTuple,
      ProposalRegisteredEvent.OutputObject
    >;
  };
}
