/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { CFP, CFPInterface } from "../CFP";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "callId_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "closingTime_",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "proposal",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "ProposalRegistered",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposal",
        type: "bytes32",
      },
    ],
    name: "proposalData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "blockNumber",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct CFP.ProposalData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closingTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposal",
        type: "bytes32",
      },
    ],
    name: "proposalTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposal",
        type: "bytes32",
      },
    ],
    name: "registerProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposal",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "registerProposalFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101006040523480156200001257600080fd5b50604051620010d5380380620010d5833981810160405281019062000038919062000250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000aa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a1906200030d565b60405180910390fd5b428211620000ef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e690620003a5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250503373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505082608081815250508160a08181525050505050620003c7565b600080fd5b6000819050919050565b6200018a8162000175565b81146200019657600080fd5b50565b600081519050620001aa816200017f565b92915050565b6000819050919050565b620001c581620001b0565b8114620001d157600080fd5b50565b600081519050620001e581620001ba565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021882620001eb565b9050919050565b6200022a816200020b565b81146200023657600080fd5b50565b6000815190506200024a816200021f565b92915050565b6000806000606084860312156200026c576200026b62000170565b5b60006200027c8682870162000199565b93505060206200028f86828701620001d4565b9250506040620002a28682870162000239565b9150509250925092565b600082825260208201905092915050565b7f6f776e657220696e76616c69646f000000000000000000000000000000000000600082015250565b6000620002f5600e83620002ac565b91506200030282620002bd565b602082019050919050565b600060208201905081810360008301526200032881620002e6565b9050919050565b7f456c20636965727265206465206c6120636f6e766f6361746f726961206e6f2060008201527f707565646520657374617220656e20656c2070617361646f0000000000000000602082015250565b60006200038d603883620002ac565b91506200039a826200032f565b604082019050919050565b60006020820190508181036000830152620003c0816200037e565b9050919050565b60805160a05160c05160e051610cbf620004166000396000818161027801526104b9015260006104930152600081816102bf015281816102e60152610548015260006106600152610cbf6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80636424e719116100665780636424e7191461015b5780638da5cb5b1461018b5780639c9cbf9c146101a9578063d955cb00146101c5578063da35c664146101e35761009e565b8063013cf08b146100a357806302d05d3f146100d35780633696b787146100f15780634b6753bc146101215780635dcfbcc21461013f575b600080fd5b6100bd60048036038101906100b89190610826565b610201565b6040516100ca919061086c565b60405180910390f35b6100db610274565b6040516100e891906108c8565b60405180910390f35b61010b6004803603810190610106919061090f565b61029c565b604051610118919061094b565b60405180910390f35b6101296102bb565b604051610136919061094b565b60405180910390f35b6101596004803603810190610154919061090f565b6102e3565b005b6101756004803603810190610170919061090f565b6103f9565b60405161018291906109c6565b60405180910390f35b61019361048f565b6040516101a091906108c8565b60405180910390f35b6101c360048036038101906101be9190610a0d565b6104b7565b005b6101cd61065c565b6040516101da919061086c565b60405180910390f35b6101eb610684565b6040516101f8919061094b565b60405180910390f35b60008160018054905080821061024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390610aaa565b60405180910390fd5b600184815481106102605761025f610aca565b5b906000526020600020015492505050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806000838152602001908152602001600020600201549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b807f0000000000000000000000000000000000000000000000000000000000000000421115610347576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033e90610b45565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e290610bd7565b60405180910390fd5b6103f58233610691565b5050565b6104016107b4565b6000808381526020019081526020016000206040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053c90610c69565b60405180910390fd5b817f00000000000000000000000000000000000000000000000000000000000000004211156105a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a090610b45565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461064d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064490610bd7565b60405180910390fd5b6106578383610691565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600180549050905090565b600060405180606001604052808373ffffffffffffffffffffffffffffffffffffffff1681526020014381526020014281525090508060008085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505060018390806001815401808255809150506001900390600052602060002001600090919091909150558173ffffffffffffffffffffffffffffffffffffffff16837f1a26f048630a7f2b9229c19a042fe677bbbad402ecb8f3fa77f9c4a3f98cae94436040516107a7919061094b565b60405180910390a3505050565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600080fd5b6000819050919050565b610803816107f0565b811461080e57600080fd5b50565b600081359050610820816107fa565b92915050565b60006020828403121561083c5761083b6107eb565b5b600061084a84828501610811565b91505092915050565b6000819050919050565b61086681610853565b82525050565b6000602082019050610881600083018461085d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b282610887565b9050919050565b6108c2816108a7565b82525050565b60006020820190506108dd60008301846108b9565b92915050565b6108ec81610853565b81146108f757600080fd5b50565b600081359050610909816108e3565b92915050565b600060208284031215610925576109246107eb565b5b6000610933848285016108fa565b91505092915050565b610945816107f0565b82525050565b6000602082019050610960600083018461093c565b92915050565b61096f816108a7565b82525050565b61097e816107f0565b82525050565b60608201600082015161099a6000850182610966565b5060208201516109ad6020850182610975565b5060408201516109c06040850182610975565b50505050565b60006060820190506109db6000830184610984565b92915050565b6109ea816108a7565b81146109f557600080fd5b50565b600081359050610a07816109e1565b92915050565b60008060408385031215610a2457610a236107eb565b5b6000610a32858286016108fa565b9250506020610a43858286016109f8565b9150509250929050565b600082825260208201905092915050565b7f496e646963652066756572612064652072616e676f0000000000000000000000600082015250565b6000610a94601583610a4d565b9150610a9f82610a5e565b602082019050919050565b60006020820190508181036000830152610ac381610a87565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f436f6e766f6361746f7269612063657272616461000000000000000000000000600082015250565b6000610b2f601483610a4d565b9150610b3a82610af9565b602082019050919050565b60006020820190508181036000830152610b5e81610b22565b9050919050565b7f4c612070726f707565737461207961206861207369646f20726567697374726160008201527f6461000000000000000000000000000000000000000000000000000000000000602082015250565b6000610bc1602283610a4d565b9150610bcc82610b65565b604082019050919050565b60006020820190508181036000830152610bf081610bb4565b9050919050565b7f536f6c6f20656c2063726561646f72207075656465206861636572206573746160008201527f206c6c616d616461000000000000000000000000000000000000000000000000602082015250565b6000610c53602883610a4d565b9150610c5e82610bf7565b604082019050919050565b60006020820190508181036000830152610c8281610c46565b905091905056fea26469706673582212206daf246e4a33e55c7968f656d7af66e77f83e4a2804562f65efadb855b2d3f6264736f6c63430008130033";

type CFPConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CFPConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CFP__factory extends ContractFactory {
  constructor(...args: CFPConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    callId_: BytesLike,
    closingTime_: BigNumberish,
    owner_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      callId_,
      closingTime_,
      owner_,
      overrides || {}
    );
  }
  override deploy(
    callId_: BytesLike,
    closingTime_: BigNumberish,
    owner_: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      callId_,
      closingTime_,
      owner_,
      overrides || {}
    ) as Promise<
      CFP & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CFP__factory {
    return super.connect(runner) as CFP__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CFPInterface {
    return new Interface(_abi) as CFPInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): CFP {
    return new Contract(address, _abi, runner) as unknown as CFP;
  }
}
